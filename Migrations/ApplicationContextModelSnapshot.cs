// <auto-generated />
using System;
using API_restauranteHamburguesas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api_restaurante_hamburguesas.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Estado", b =>
                {
                    b.Property<int>("EstadoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estado")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoUsuarioId"));

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(13)")
                        .HasColumnName("nombre_estado")
                        .HasColumnOrder(2);

                    b.HasKey("EstadoUsuarioId");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            EstadoUsuarioId = 1,
                            Nombre = "Habililtado"
                        },
                        new
                        {
                            EstadoUsuarioId = 2,
                            Nombre = "Deshabilitado"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.Orden", b =>
                {
                    b.Property<int>("OrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_orden");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdenId"));

                    b.Property<int>("ClienteId_Orden")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id_orden");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha_compra_orden");

                    b.HasKey("OrdenId");

                    b.HasIndex("ClienteId_Orden");

                    b.ToTable("Ordenes");

                    b.HasData(
                        new
                        {
                            OrdenId = 1,
                            ClienteId_Orden = 1,
                            Fecha = new DateTime(2023, 12, 4, 18, 8, 56, 824, DateTimeKind.Local).AddTicks(4188)
                        },
                        new
                        {
                            OrdenId = 2,
                            ClienteId_Orden = 2,
                            Fecha = new DateTime(2023, 12, 4, 18, 8, 56, 824, DateTimeKind.Local).AddTicks(4227)
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ProductoCarrito", b =>
                {
                    b.Property<int>("ProductoCarritoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_carrito");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoCarritoId"));

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("id_cantidad_carrito");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int")
                        .HasColumnName("id_orden_carrito");

                    b.HasKey("ProductoCarritoId");

                    b.HasIndex("OrdenId");

                    b.ToTable("Carrito");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductoCarrito");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Catalogos.GeneroCliente", b =>
                {
                    b.Property<int>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_genero")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneroId"));

                    b.Property<string>("Genero")
                        .HasColumnType("varchar(9)")
                        .HasColumnName("genero_cliente")
                        .HasColumnOrder(2);

                    b.HasKey("GeneroId");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            GeneroId = 1,
                            Genero = "Masculino"
                        },
                        new
                        {
                            GeneroId = 2,
                            Genero = "Femenino"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Catalogos.TipoUsuario", b =>
                {
                    b.Property<int>("TipoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_usuario")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoUsuarioId"));

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(13)")
                        .HasColumnName("tipo_usuario")
                        .HasColumnOrder(2);

                    b.HasKey("TipoUsuarioId");

                    b.ToTable("TiposUsuario");

                    b.HasData(
                        new
                        {
                            TipoUsuarioId = 1,
                            Tipo = "Administrador"
                        },
                        new
                        {
                            TipoUsuarioId = 2,
                            Tipo = "Cliente"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cliente")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("apellido_cliente")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("fechaN_cliente")
                        .HasColumnOrder(4);

                    b.Property<int>("GeneroId_Cliente")
                        .HasColumnType("int")
                        .HasColumnName("id_genero_cliente")
                        .HasColumnOrder(5);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre_cliente")
                        .HasColumnOrder(2);

                    b.HasKey("ClienteId");

                    b.HasIndex("GeneroId_Cliente");

                    b.ToTable("Clientes", t =>
                        {
                            t.HasCheckConstraint("CK_Genero", "[id_genero_cliente] = 1 OR [id_genero_cliente] = 2");
                        });

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Apellido = "Jácome",
                            FechaNacimiento = new DateTime(2003, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId_Cliente = 1,
                            Nombre = "Christian"
                        },
                        new
                        {
                            ClienteId = 2,
                            Apellido = "Jácome",
                            FechaNacimiento = new DateTime(2007, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId_Cliente = 1,
                            Nombre = "Xavier"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente")
                        .HasColumnOrder(9);

                    b.Property<int>("EstadoUsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("estado_usuario")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("FechaAcceso")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_acceso")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasColumnOrder(6);

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre_usuario")
                        .HasColumnOrder(3);

                    b.Property<string>("PasswordUsuario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_usuario")
                        .HasColumnOrder(5);

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt_password")
                        .HasColumnOrder(4);

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_usuario")
                        .HasColumnOrder(2);

                    b.HasKey("UsuarioId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoUsuarioId");

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            EstadoUsuarioId = 1,
                            FechaAcceso = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7506),
                            FechaCreacion = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7492),
                            NombreUsuario = "admin",
                            PasswordUsuario = "AQAAAAIAAYagAAAAELNPoSIDhuaw8WZMK2R1VtjDupswGSDnvYNsygcN0rlVnG4NvUHLQY8gxeXokFyOUg==",
                            SaltPassword = "170965456C39FC5D25C3C8E5E93E2F3909812BEC7B2BF2BE5044DCED6486B6523D971B1119FF8DBD70693223F9EE01B286D8917B76E0418FBAD2FB8A91DA2AFD",
                            TipoUsuarioId = 1
                        },
                        new
                        {
                            UsuarioId = 2,
                            ClienteId = 1,
                            EstadoUsuarioId = 1,
                            FechaAcceso = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7514),
                            FechaCreacion = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7514),
                            NombreUsuario = "chris2003",
                            PasswordUsuario = "AQAAAAIAAYagAAAAEH56EzP7y8NgIT+LUJSr3y93z98iSCuHmA0FXVXjuYnE83wex2cs4phbnJjKcOjcsw==",
                            SaltPassword = "6BCB48B6F17F890FE18E2E542A5A883615EBA70BB83A402766A99E0DF5B1B215700D16C3B2691081FADF50D9D0C63FCDCDC8B233AD8212A40BA5C39E03B18483",
                            TipoUsuarioId = 2
                        },
                        new
                        {
                            UsuarioId = 3,
                            ClienteId = 2,
                            EstadoUsuarioId = 1,
                            FechaAcceso = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7519),
                            FechaCreacion = new DateTime(2023, 12, 4, 18, 8, 56, 588, DateTimeKind.Local).AddTicks(7518),
                            NombreUsuario = "xavier2007",
                            PasswordUsuario = "AQAAAAIAAYagAAAAEH0cYlqM04fVp+vv6mOuVxIRx7BZSYL6YaOgbPjVijwA16iYOq0yqYYGqphe9u7kYg==",
                            SaltPassword = "10C7305832E3D6955B0B6E1B0FA2448EF6389024452B3602848F0B067D0BF83ADC9C80AF8AFE15580F0964594CC81D40F52B36591E4629FC64B79AFECAB724D2",
                            TipoUsuarioId = 2
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaCombo", b =>
                {
                    b.Property<int>("CategoriaId_Combo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_combo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId_Combo"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre_categoria_combo");

                    b.HasKey("CategoriaId_Combo");

                    b.ToTable("CategoriasCombo");

                    b.HasData(
                        new
                        {
                            CategoriaId_Combo = 1,
                            Nombre = "ComboCarrito Familiar"
                        },
                        new
                        {
                            CategoriaId_Combo = 2,
                            Nombre = "ComboCarrito Individual"
                        },
                        new
                        {
                            CategoriaId_Combo = 3,
                            Nombre = "ComboCarrito Infantil"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaComida", b =>
                {
                    b.Property<int>("CategoriaId_Comida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_comida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId_Comida"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre_categoria_comida");

                    b.HasKey("CategoriaId_Comida");

                    b.ToTable("CategoriasComida");

                    b.HasData(
                        new
                        {
                            CategoriaId_Comida = 1,
                            Nombre = "Hamburguesa"
                        },
                        new
                        {
                            CategoriaId_Comida = 2,
                            Nombre = "Bebida"
                        },
                        new
                        {
                            CategoriaId_Comida = 3,
                            Nombre = "Complemento"
                        },
                        new
                        {
                            CategoriaId_Comida = 4,
                            Nombre = "Postre"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Combo", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_producto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<int?>("CategoriaId_Combo")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_combo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_producto");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(1,1)")
                        .HasColumnName("descuento_combo");

                    b.Property<int>("EstadoComboId")
                        .HasColumnType("int")
                        .HasColumnName("estado_combo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre_producto");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId_Combo");

                    b.HasIndex("EstadoComboId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            CategoriaId_Combo = 2,
                            Descripcion = "El combo clásico incluye una hamburguesa con queso,\r\nacompañada por papas fritas y una bebida refrescante.",
                            Descuento = 0.3m,
                            EstadoComboId = 1,
                            Nombre = "ComboCarrito Clásico"
                        },
                        new
                        {
                            ProductoId = 2,
                            CategoriaId_Combo = 1,
                            Descripcion = "El Combo \"Para Todos\" ofrece hamburguesas individuales\r\nvariadas con nachos cubiertos de sabores intensos,\r\npapas fritas especiales y una jarra grande de bebidas refrescantes.\r\n¡Ideal para satisfacer los gustos de todos en el grupo!",
                            Descuento = 0.2m,
                            EstadoComboId = 1,
                            Nombre = "ComboCarrito Para Todos"
                        },
                        new
                        {
                            ProductoId = 3,
                            CategoriaId_Combo = 3,
                            Descripcion = "El Combo \"Mini Burguer\" ofrece una hamburguesa pequeña\r\ncon queso y vegetales, acompañada de papas fritas y\r\nuna bebida refrescante, perfecto para los más pequeños.",
                            Descuento = 0.1m,
                            EstadoComboId = 1,
                            Nombre = "ComboCarrito Mini Burguer"
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.ComboComida", b =>
                {
                    b.Property<int>("ComboComidaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_comida_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboComidaId"));

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("cantidad_combo_comida");

                    b.Property<int>("IdCombo")
                        .HasColumnType("int")
                        .HasColumnName("id_combo");

                    b.Property<int>("IdComida")
                        .HasColumnType("int")
                        .HasColumnName("id_comida");

                    b.HasKey("ComboComidaId");

                    b.HasIndex("IdCombo");

                    b.HasIndex("IdComida");

                    b.ToTable("ComboComida");

                    b.HasData(
                        new
                        {
                            ComboComidaId = 1,
                            Cantidad = 1m,
                            IdCombo = 1,
                            IdComida = 1
                        },
                        new
                        {
                            ComboComidaId = 2,
                            Cantidad = 1m,
                            IdCombo = 1,
                            IdComida = 4
                        },
                        new
                        {
                            ComboComidaId = 3,
                            Cantidad = 3m,
                            IdCombo = 1,
                            IdComida = 5
                        },
                        new
                        {
                            ComboComidaId = 4,
                            Cantidad = 1m,
                            IdCombo = 1,
                            IdComida = 6
                        },
                        new
                        {
                            ComboComidaId = 5,
                            Cantidad = 1m,
                            IdCombo = 1,
                            IdComida = 7
                        },
                        new
                        {
                            ComboComidaId = 6,
                            Cantidad = 1m,
                            IdCombo = 1,
                            IdComida = 8
                        },
                        new
                        {
                            ComboComidaId = 7,
                            Cantidad = 3m,
                            IdCombo = 2,
                            IdComida = 2
                        },
                        new
                        {
                            ComboComidaId = 8,
                            Cantidad = 3m,
                            IdCombo = 2,
                            IdComida = 4
                        },
                        new
                        {
                            ComboComidaId = 9,
                            Cantidad = 6m,
                            IdCombo = 2,
                            IdComida = 5
                        },
                        new
                        {
                            ComboComidaId = 10,
                            Cantidad = 3m,
                            IdCombo = 2,
                            IdComida = 6
                        },
                        new
                        {
                            ComboComidaId = 11,
                            Cantidad = 2m,
                            IdCombo = 2,
                            IdComida = 7
                        },
                        new
                        {
                            ComboComidaId = 12,
                            Cantidad = 2m,
                            IdCombo = 2,
                            IdComida = 8
                        },
                        new
                        {
                            ComboComidaId = 13,
                            Cantidad = 1m,
                            IdCombo = 3,
                            IdComida = 3
                        },
                        new
                        {
                            ComboComidaId = 14,
                            Cantidad = 1m,
                            IdCombo = 3,
                            IdComida = 5
                        },
                        new
                        {
                            ComboComidaId = 15,
                            Cantidad = 1m,
                            IdCombo = 3,
                            IdComida = 6
                        },
                        new
                        {
                            ComboComidaId = 16,
                            Cantidad = 1m,
                            IdCombo = 3,
                            IdComida = 7
                        },
                        new
                        {
                            ComboComidaId = 17,
                            Cantidad = 1m,
                            IdCombo = 3,
                            IdComida = 8
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Comida", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_producto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<int?>("CategoriaId_Comida")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_comida");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_producto");

                    b.Property<int>("EstadoComidaId")
                        .HasColumnType("int")
                        .HasColumnName("estado_comida");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre_producto");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(2,1)")
                        .HasColumnName("precio_comida");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId_Comida");

                    b.HasIndex("EstadoComidaId");

                    b.ToTable("Comidas");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            CategoriaId_Comida = 1,
                            Descripcion = "Una hamburguesa con queso, lechuga, tomate, cebolla y salsa especial.",
                            EstadoComidaId = 1,
                            Nombre = "Hamburguesa Clásica",
                            Precio = 5.5m
                        },
                        new
                        {
                            ProductoId = 2,
                            CategoriaId_Comida = 1,
                            Descripcion = "Doble carne con queso, tocino, lechuga, tomate y aderezos.",
                            EstadoComidaId = 1,
                            Nombre = "Hamburguesa Doble",
                            Precio = 7.5m
                        },
                        new
                        {
                            ProductoId = 3,
                            CategoriaId_Comida = 1,
                            Descripcion = "Una hamburguesa más pequeña con queso y vegetales básicos.",
                            EstadoComidaId = 1,
                            Nombre = "Mini Hamburguesa Sencilla",
                            Precio = 3.5m
                        },
                        new
                        {
                            ProductoId = 4,
                            CategoriaId_Comida = 3,
                            Descripcion = "Papas fritas grandes",
                            EstadoComidaId = 1,
                            Nombre = "Papas Fritas Grandes",
                            Precio = 2.5m
                        },
                        new
                        {
                            ProductoId = 5,
                            CategoriaId_Comida = 3,
                            Descripcion = "Papas fritas pequeñas",
                            EstadoComidaId = 1,
                            Nombre = "Papas Fritas Pequeñas",
                            Precio = 1.5m
                        },
                        new
                        {
                            ProductoId = 6,
                            CategoriaId_Comida = 2,
                            Descripcion = "Coca Cola personal de 500 ml",
                            EstadoComidaId = 1,
                            Nombre = "Coca Cola (500ml)",
                            Precio = 2.5m
                        },
                        new
                        {
                            ProductoId = 7,
                            CategoriaId_Comida = 4,
                            Descripcion = "Helado de vainilla",
                            EstadoComidaId = 1,
                            Nombre = "Helado de Vainilla",
                            Precio = 1.5m
                        },
                        new
                        {
                            ProductoId = 8,
                            CategoriaId_Comida = 4,
                            Descripcion = "Helado de chocalate",
                            EstadoComidaId = 1,
                            Nombre = "Helado de Chocolate",
                            Precio = 1.5m
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Imagen", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_imagen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagenId"));

                    b.Property<byte[]>("Datos")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("datos_imagen");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("titulo_imagen");

                    b.HasKey("ImagenId");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ComboCarrito", b =>
                {
                    b.HasBaseType("api_restaurante_hamburguesas.Models.Orden.ProductoCarrito");

                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("id_combo_combo_carrito");

                    b.HasIndex("ComboId");

                    b.HasDiscriminator().HasValue("ComboCarrito");

                    b.HasData(
                        new
                        {
                            ProductoCarritoId = 1,
                            Cantidad = 3m,
                            OrdenId = 1,
                            ComboId = 1
                        },
                        new
                        {
                            ProductoCarritoId = 2,
                            Cantidad = 2m,
                            OrdenId = 1,
                            ComboId = 1
                        },
                        new
                        {
                            ProductoCarritoId = 3,
                            Cantidad = 1m,
                            OrdenId = 2,
                            ComboId = 3
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ComidaCarrito", b =>
                {
                    b.HasBaseType("api_restaurante_hamburguesas.Models.Orden.ProductoCarrito");

                    b.Property<int?>("ComboCarritoId")
                        .HasColumnType("int")
                        .HasColumnName("id_combo_comida_carrito)");

                    b.Property<int>("ComidaId")
                        .HasColumnType("int")
                        .HasColumnName("id_comida_comida_carrito");

                    b.HasIndex("ComboCarritoId");

                    b.HasIndex("ComidaId");

                    b.HasDiscriminator().HasValue("ComidaCarrito");

                    b.HasData(
                        new
                        {
                            ProductoCarritoId = 4,
                            Cantidad = 3m,
                            OrdenId = 1,
                            ComboCarritoId = 1,
                            ComidaId = 1
                        },
                        new
                        {
                            ProductoCarritoId = 5,
                            Cantidad = 5m,
                            OrdenId = 1,
                            ComboCarritoId = 1,
                            ComidaId = 5
                        },
                        new
                        {
                            ProductoCarritoId = 6,
                            Cantidad = 5m,
                            OrdenId = 1,
                            ComboCarritoId = 1,
                            ComidaId = 6
                        },
                        new
                        {
                            ProductoCarritoId = 7,
                            Cantidad = 2m,
                            OrdenId = 1,
                            ComboCarritoId = 1,
                            ComidaId = 7
                        },
                        new
                        {
                            ProductoCarritoId = 8,
                            Cantidad = 2m,
                            OrdenId = 1,
                            ComboCarritoId = 2,
                            ComidaId = 1
                        },
                        new
                        {
                            ProductoCarritoId = 9,
                            Cantidad = 3m,
                            OrdenId = 1,
                            ComboCarritoId = 2,
                            ComidaId = 4
                        },
                        new
                        {
                            ProductoCarritoId = 10,
                            Cantidad = 3m,
                            OrdenId = 1,
                            ComboCarritoId = 2,
                            ComidaId = 6
                        },
                        new
                        {
                            ProductoCarritoId = 11,
                            Cantidad = 1m,
                            OrdenId = 1,
                            ComboCarritoId = 2,
                            ComidaId = 8
                        },
                        new
                        {
                            ProductoCarritoId = 13,
                            Cantidad = 1m,
                            OrdenId = 2,
                            ComboCarritoId = 3,
                            ComidaId = 3
                        },
                        new
                        {
                            ProductoCarritoId = 14,
                            Cantidad = 3m,
                            OrdenId = 2,
                            ComboCarritoId = 3,
                            ComidaId = 5
                        },
                        new
                        {
                            ProductoCarritoId = 15,
                            Cantidad = 3m,
                            OrdenId = 2,
                            ComboCarritoId = 3,
                            ComidaId = 6
                        },
                        new
                        {
                            ProductoCarritoId = 16,
                            Cantidad = 3m,
                            OrdenId = 2,
                            ComboCarritoId = 3,
                            ComidaId = 7
                        },
                        new
                        {
                            ProductoCarritoId = 17,
                            Cantidad = 4m,
                            OrdenId = 2,
                            ComidaId = 2
                        },
                        new
                        {
                            ProductoCarritoId = 18,
                            Cantidad = 2m,
                            OrdenId = 2,
                            ComidaId = 6
                        });
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.Orden", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Persona.Cliente", "Cliente")
                        .WithOne("Orden")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Orden.Orden", "ClienteId_Orden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ProductoCarrito", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Orden.Orden", "Orden")
                        .WithOne("Carrito")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Orden.ProductoCarrito", "OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Cliente", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Persona.Catalogos.GeneroCliente", "Genero")
                        .WithOne("Cliente")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Persona.Cliente", "GeneroId_Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Usuario", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Persona.Cliente", "Cliente")
                        .WithOne("Usuario")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Persona.Usuario", "ClienteId");

                    b.HasOne("api_restaurante_hamburguesas.Models.Estado", "EstadoUsuario")
                        .WithOne("Usuario")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Persona.Usuario", "EstadoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_restaurante_hamburguesas.Models.Persona.Catalogos.TipoUsuario", "TipoUsuario")
                        .WithOne("Usuario")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Persona.Usuario", "TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EstadoUsuario");

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Combo", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaCombo", "CategoriaCombo")
                        .WithOne("Combo")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.Combo", "CategoriaId_Combo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api_restaurante_hamburguesas.Models.Estado", "EstadoCombo")
                        .WithOne("Combo")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.Combo", "EstadoComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaCombo");

                    b.Navigation("EstadoCombo");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.ComboComida", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Combo", "Combo")
                        .WithOne("ComboComida")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.ComboComida", "IdCombo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Comida", "Comida")
                        .WithOne("ComboComida")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.ComboComida", "IdComida")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Comida");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Comida", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaComida", "CategoriaComida")
                        .WithOne("Comida")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.Comida", "CategoriaId_Comida")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api_restaurante_hamburguesas.Models.Estado", "EstadoComida")
                        .WithOne("Comida")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Productos.Comida", "EstadoComidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaComida");

                    b.Navigation("EstadoComida");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ComboCarrito", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Combo", "Combo")
                        .WithOne("ComboCarrito")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Orden.ComboCarrito", "ComboId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.ComidaCarrito", b =>
                {
                    b.HasOne("api_restaurante_hamburguesas.Models.Orden.ComboCarrito", "ComboCarrito")
                        .WithMany()
                        .HasForeignKey("ComboCarritoId");

                    b.HasOne("api_restaurante_hamburguesas.Models.Productos.Comida", "Comida")
                        .WithOne("ComidaCarrito")
                        .HasForeignKey("api_restaurante_hamburguesas.Models.Orden.ComidaCarrito", "ComidaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ComboCarrito");

                    b.Navigation("Comida");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Estado", b =>
                {
                    b.Navigation("Combo");

                    b.Navigation("Comida");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Orden.Orden", b =>
                {
                    b.Navigation("Carrito");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Catalogos.GeneroCliente", b =>
                {
                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Catalogos.TipoUsuario", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Persona.Cliente", b =>
                {
                    b.Navigation("Orden");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaCombo", b =>
                {
                    b.Navigation("Combo");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Catalogos.CategoriaComida", b =>
                {
                    b.Navigation("Comida");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Combo", b =>
                {
                    b.Navigation("ComboCarrito");

                    b.Navigation("ComboComida");
                });

            modelBuilder.Entity("api_restaurante_hamburguesas.Models.Productos.Comida", b =>
                {
                    b.Navigation("ComboComida");

                    b.Navigation("ComidaCarrito");
                });
#pragma warning restore 612, 618
        }
    }
}
